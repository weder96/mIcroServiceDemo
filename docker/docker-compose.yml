version: "3.8"
services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 5s
      timeout: 5s
      retries: 5
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring
  config-server:
    image: dtimchenko/config-server:latest
    container_name: config-server
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8010:8010"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - spring
    healthcheck:
      test: "curl --fail --silent localhost:8010/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  eureka-server:
    image: dtimchenko/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - spring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  apigw:
    image: dtimchenko/apigw:latest
    container_name: apigw
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8010/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_ZIPKIN_BASEURL=http://zipkin:9411
    volumes:
      - apigw-volume:/logs
    networks:
      - spring
      - elk
      - monitoring
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  customer:
    image: dtimchenko/customer:latest
    container_name: customer
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - "8011:8011"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8010/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_ZIPKIN_BASEURL=http://zipkin:9411
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customer
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=http://keycloak:8080/auth/realms/customers
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_TOKENURI=http://keycloak:8080/auth/realms/customers/protocol/openid-connect/token
      - GRPC_CLIENT_GRPC_FRAUD_SERVICE_ADDRESS=static://fraud:9000
      - GRPC_CLIENT_GRPC_FRAUD_SERVICE_NEGOTIATIONTYPE=plaintext
    networks:
      - spring
      - postgres
      - elk
      - monitoring
      - auth
    volumes:
      - customer-volume:/logs
    healthcheck:
      test: "curl --fail --silent localhost:8011/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  fraud:
    image: dtimchenko/fraud:latest
    container_name: fraud
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - "8012:8012"
      - "9000:9000"
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8010/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_ZIPKIN_BASEURL=http://zipkin:9411
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fraud
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=http://keycloak:8080/auth/realms/customers
      - GRPC_SERVER_PORT=9000
    volumes:
      - fraud-volume:/logs
    networks:
      - spring
      - postgres
      - elk
      - monitoring
      - auth
    healthcheck:
      test: "curl --fail --silent localhost:8012/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  elasticsearch:
    image: elasticsearch:8.1.3
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elk
  kibana:
    image: kibana:8.1.3
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elk
  logstash:
    image: logstash:8.1.3
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - elk
  customer-filebeat:
    image: docker.elastic.co/beats/filebeat:8.1.3
    container_name: customer-filebeat
    user: root
    volumes:
      - ./filebeat/customer.filebeat.yml:/usr/share/filebeat/filebeat.yml
      - customer-volume:/data/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - elk
  fraud-filebeat:
    image: docker.elastic.co/beats/filebeat:8.1.3
    container_name: fraud-filebeat
    user: root
    volumes:
      - ./filebeat/fraud.filebeat.yml:/usr/share/filebeat/filebeat.yml
      - fraud-volume:/data/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - elk
  apigw-filebeat:
    image: docker.elastic.co/beats/filebeat:8.1.3
    container_name: apigw-filebeat
    user: root
    volumes:
      - ./filebeat/apigw.filebeat.yml:/usr/share/filebeat/filebeat.yml
      - apigw-volume:/data/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - elk
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.35.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    depends_on:
      - customer
      - fraud
      - apigw
    networks:
      - monitoring
  grafana:
    container_name: grafana
    image: grafana/grafana:8.5.1
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring
    depends_on:
      - prometheus
  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    volumes:
      - zookeeper-volume:/data
    networks:
      - kafka
  kafka:
    image: confluentinc/cp-kafka:7.1.1
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-volume:/tmp/docker/kafka1/data
    networks:
      - kafka
      - elk
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 30s
      timeout: 10s
      retries: 3
  keycloak:
    image: jboss/keycloak:latest
    container_name: keycloak
    hostname: keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_SCHEMA: public
      DB_PASSWORD: admin
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_HOSTNAME: keycloak
    ports:
      - 8080:8080
      - 8443:8443
    networks:
      - auth
      - postgres
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/realms/master" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

networks:
  auth:
    driver: bridge
  postgres:
    driver: bridge
  spring:
    driver: bridge
  elk:
    driver: bridge
  monitoring:
    driver: bridge
  kafka:
    driver: bridge

volumes:
  keycloak:
  zookeeper-volume:
  kafka-volume:
  postgres:
  pgadmin:
  customer-volume:
  apigw-volume:
  fraud-volume:
  elasticsearch-data:
    driver: local